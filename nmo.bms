# 3DVIA .nmo assets extractor 0.1 by artlavrov
# script for QuickBMS http://quickbms.aluigi.org

endian little

# determine format
getct SIG string 0

if SIG != "Nemo Fi"
	print "Not an .nmo file"
	cleanexit
endif

get C_DATE long
get C_CRC long
get C_PLUGIN1 long
get C_PLUGIN2 long
get C_FLAGS long

get C_COMPCSZ long
get C_OBJCSZ long
get C_OBJSZ long
get C_ADDPATH long

get C_COMPCOUNT long
get C_OBJCOUNT long
get C_ZERO long
get C_VERSION long
get C_COMPSIZE long

string TMP p= "crc: 0x%08x objectCount: %d componentsCount: %d" C_CRC C_OBJCOUNT C_COMPCOUNT
print "%TMP%"

comtype zlib

set OFFSET 64

if C_COMPCSZ != C_COMPSIZE
	clog MEMORY_FILE1 OFFSET C_COMPCSZ C_COMPSIZE
else
	log MEMORY_FILE1 OFFSET C_COMPSIZE
endif

math OFFSET += C_COMPCSZ

if C_OBJCSZ != C_OBJSZ
	clog MEMORY_FILE2 OFFSET C_OBJCSZ C_OBJSZ
else
	log MEMORY_FILE2 OFFSET C_OBJSZ
endif

log MEMORY_FILE3 0 0

set totalSize C_COMPSIZE
math totalSize += 64
set OFFSET 0
string NAME p= "objects/%08d_0x%08x_%02d_%s" 0 0 0 "PARAMETEROPERATION"
set TITLE = ""

for i = 0 < C_COMPCOUNT

	get C_ID long MEMORY_FILE1
	get C_TYPE long MEMORY_FILE1
	get C_OFS long MEMORY_FILE1
	get C_NAMELEN long MEMORY_FILE1
	getdstring C_NAME C_NAMELEN MEMORY_FILE1

	set SIZE C_OFS
	math SIZE -= totalSize

	# only write up to 1024 files, chunks were not supposed as files anyway
	if i <= 1024
		log NAME OFFSET SIZE MEMORY_FILE2 # write resource file
	endif

	if TYPE == "TEXTURE"
		set T_OFS OFFSET
		goto T_OFS MEMORY_FILE2
		get T_LENGTH long MEMORY_FILE2
		get T_UNK0 byte MEMORY_FILE2
		get T_CID byte MEMORY_FILE2
		get T_VER short MEMORY_FILE2
		get T_DATASIZE0 long MEMORY_FILE2
		get T_UNK1 long MEMORY_FILE2
		get T_DATASIZE1 long MEMORY_FILE2
		get T_UNK1 long MEMORY_FILE2
		get T_BPP long MEMORY_FILE2
		get T_WIDTH long MEMORY_FILE2
		get T_HEIGHT long MEMORY_FILE2

		string T_NAME p= "textures/%08d_0x%08x_%dx%dx%d.tga" INDEX ID T_WIDTH T_HEIGHT T_BPP

		if T_BPP >= 8 and T_BPP <= 32
			xmath PLANES "T_BPP/8"

			for p = 0 < PLANES
				get T_PBIND long MEMORY_FILE2
				next p

			get T_UNK2 long MEMORY_FILE2

			# save tga
			log MEMORY_FILE4 0 0
			put 0 byte MEMORY_FILE4
			put 0 byte MEMORY_FILE4
			put 2 byte MEMORY_FILE4
			put 0 short MEMORY_FILE4
			put 0 short MEMORY_FILE4
			put 0 byte MEMORY_FILE4
			put 0 short MEMORY_FILE4
			put 0 short MEMORY_FILE4
			put T_WIDTH short MEMORY_FILE4
			put T_HEIGHT short MEMORY_FILE4
			put T_BPP byte MEMORY_FILE4
			put 0 byte MEMORY_FILE4

			log MEMORY_FILE5 0 0
			xmath PLANE_SIZE "T_WIDTH * T_HEIGHT"
			for p = 0 < PLANES
				get T_PSIZE long MEMORY_FILE2
				getdstring PLANE PLANE_SIZE MEMORY_FILE2
				putdstring PLANE PLANE_SIZE MEMORY_FILE5
				next p

			# planar to RGBA conversion, really slow
			for k = 0 < PLANE_SIZE
				set OFS k
				for p = 0 < PLANES
					goto OFS MEMORY_FILE5
					get C byte MEMORY_FILE5
					put C byte MEMORY_FILE4
					math OFS += PLANE_SIZE
					next p
				next k

			get IMG_SIZE asize MEMORY_FILE4
			log T_NAME 0 IMG_SIZE MEMORY_FILE4
		endif
	endif

	if C_TYPE == 1
		set TYPE string "OBJECT"
	elif C_TYPE == 2
		set TYPE string "PARAMETERIN"
	elif C_TYPE == 3
		set TYPE string "PARAMETEROUT"
	elif C_TYPE == 4
		set TYPE string "PARAMETEROPERATION"
	elif C_TYPE == 5
		set TYPE string "STATE"
	elif C_TYPE == 6
		set TYPE string "BEHAVIORLINK"
	elif C_TYPE == 8
		set TYPE string "BEHAVIOR"
	elif C_TYPE == 9
		set TYPE string "BEHAVIORIO"
	elif C_TYPE == 10
		set TYPE string "SCENE"
	elif C_TYPE == 11
		set TYPE string "SCENEOBJECT"
	elif C_TYPE == 12
		set TYPE string "RENDERCONTEXT"
	elif C_TYPE == 13
		set TYPE string "KINEMATICCHAIN"
	elif C_TYPE == 15
		set TYPE string "OBJECTANIMATION"
	elif C_TYPE == 16
		set TYPE string "ANIMATION"
	elif C_TYPE == 18
		set TYPE string "KEYEDANIMATION"
	elif C_TYPE == 19
		set TYPE string "BEOBJECT"
	elif C_TYPE == 20
		set TYPE string "SYNCHRO"
	elif C_TYPE == 21
		set TYPE string "LEVEL"
	elif C_TYPE == 22
		set TYPE string "PLACE"
	elif C_TYPE == 23
		set TYPE string "GROUP"
	elif C_TYPE == 24
		set TYPE string "SOUND"
	elif C_TYPE == 25
		set TYPE string "WAVESOUND"
	elif C_TYPE == 26
		set TYPE string "MIDISOUND"
	elif C_TYPE == 27
		set TYPE string "ENTITY_2D"
	elif C_TYPE == 28
		set TYPE string "SPRITE"
	elif C_TYPE == 29
		set TYPE string "SPRITETEXT"
	elif C_TYPE == 30
		set TYPE string "MATERIAL"
	elif C_TYPE == 31
		set TYPE string "TEXTURE"
	elif C_TYPE == 32
		set TYPE string "MESH"
	elif C_TYPE == 33
		set TYPE string "ENTITY_3D"
	elif C_TYPE == 34
		set TYPE string "CAMERA"
	elif C_TYPE == 35
		set TYPE string "TARGETCAMERA"
	elif C_TYPE == 36
		set TYPE string "CURVEPOINT"
	elif C_TYPE == 37
		set TYPE string "SPRITE3D"
	elif C_TYPE == 38
		set TYPE string "LIGHT"
	elif C_TYPE == 39
		set TYPE string "TARGETLIGHT"
	elif C_TYPE == 40
		set TYPE string "CHARACTER"
	elif C_TYPE == 41
		set TYPE string "OBJECT_3D"
	elif C_TYPE == 42
		set TYPE string "BODYPART"
	elif C_TYPE == 43
		set TYPE string "CURVE"
	elif C_TYPE == 45
		set TYPE string "PARAMETERLOCAL"
	elif C_TYPE == 46
		set TYPE string "PARAMETER"
	elif C_TYPE == 47
		set TYPE string "RENDEROBJECT"
	elif C_TYPE == 48
		set TYPE string "INTERFACEOBJECTMANAGER"
	elif C_TYPE == 49
		set TYPE string "CRITICALSECTION"
	elif C_TYPE == 50
		set TYPE string "GRID"
	elif C_TYPE == 51
		set TYPE string "LAYER"
	elif C_TYPE == 52
		set TYPE string "DATAARRAY"
	elif C_TYPE == 53
		set TYPE string "PATCHMESH"
	elif C_TYPE == 54
		set TYPE string "PROGRESSIVEMESH"
	elif C_TYPE == 55
		set TYPE string "PARAMETERVARIABLE"
	elif C_TYPE == 56
		set TYPE string "POINTCLOUD_3D"
	elif C_TYPE == 57
		set TYPE string "VIDEO"
	elif C_TYPE == 58
		set TYPE string "MAXCLASSID"
	elif C_TYPE == 80
		set TYPE string "OBJECTARRAY"
	elif C_TYPE == 81
		set TYPE string "SCENEOBJECTDESC"
	elif C_TYPE == 82
		set TYPE string "ATTRIBUTEMANAGER"
	elif C_TYPE == 83
		set TYPE string "MESSAGEMANAGER"
	elif C_TYPE == 84
		set TYPE string "COLLISIONMANAGER"
	elif C_TYPE == 85
		set TYPE string "OBJECTMANAGER"
	elif C_TYPE == 86
		set TYPE string "FLOORMANAGER"
	elif C_TYPE == 87
		set TYPE string "RENDERMANAGER"
	elif C_TYPE == 88
		set TYPE string "BEHAVIORMANAGER"
	elif C_TYPE == 89
		set TYPE string "INPUTMANAGER"
	elif C_TYPE == 90
		set TYPE string "PARAMETERMANAGER"
	elif C_TYPE == 91
		set TYPE string "GRIDMANAGER"
	elif C_TYPE == 92
		set TYPE string "SOUNDMANAGER"
	elif C_TYPE == 93
		set TYPE string "TIMEMANAGER"
	elif C_TYPE == 94
		set TYPE string "VIDEOMANAGER"
	else
		set TYPE string "UNKNOWN"
	endif

	string TMP p= "%8d %8d %s \"%s\"" OFFSET SIZE NAME (TITLE)
	put TMP line MEMORY_FILE3

	string NAME p= "objects/%08d_0x%08x_%02d_%s" i C_ID C_TYPE TYPE
	string TITLE p= "%s" C_NAME

	set INDEX i
	set ID C_ID

	math OFFSET += SIZE
	math totalSize += SIZE

	next i

xmath SIZE "C_OBJSZ - C_OFS + C_COMPSIZE + 64"
string TMP p= "%8d %8d %s \"%s\"" OFFSET SIZE NAME (TITLE)
put TMP line MEMORY_FILE3
# write last resource file
if i <= 1024
	log NAME OFFSET SIZE MEMORY_FILE2 # write resource file
endif

get SIZE asize MEMORY_FILE1
log "components.bin" 0 SIZE MEMORY_FILE1

get SIZE asize MEMORY_FILE2
log "objects.bin" 0 SIZE MEMORY_FILE2

get SIZE asize MEMORY_FILE3
log "objects.txt" 0 SIZE MEMORY_FILE3

